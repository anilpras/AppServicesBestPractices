##HTML VERSION


#!/bin/bash

_subscriptionId=""

BOLD=$(tput bold)
RESET=$(tput sgr0)
RED='\033[0;31m'
BRIGHTRED='\e[91m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BORDER="\e[47m\e[30m"

# Define color codes for green, red, and reset
color_enabled="\e[32m"    # Green for "ENABLED"
color_disabled="\e[93;1m" # Yellow for "DISABLED"
color_reset="\e[0m"       # Reset to default color

# HTML Output file
html_output="0.html"

# Start HTML file
echo "<html lang='en'>" > $html_output
echo "<head><meta charset='UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'><title>Azure App Service Recommendations</title>" >> $html_output
echo "<style>body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f4f4f4; }" >> $html_output
echo "table { width: 100%; border-collapse: collapse; margin: 20px 0; }" >> $html_output
echo "th, td { padding: 12px; text-align: left; border: 1px solid #ddd; }" >> $html_output
echo "th { background-color: #4CAF50; color: white; }" >> $html_output
echo "tr:nth-child(even) { background-color: #f2f2f2; }" >> $html_output
echo "h2 { text-align: center; color: #333; }" >> $html_output
echo "h3 { color: #4CAF50; }" >> $html_output
echo ".warning { color: red; font-weight: bold; }" >> $html_output
echo ".success { color: green; font-weight: bold; }" >> $html_output
echo "</style></head>" >> $html_output
echo "<body>" >> $html_output

# Add header section
echo "<h2>Azure App Services Recommendations</h2>" >> $html_output
echo "<hr>" >> $html_output

# App Services Common Configuration Table
echo "<h4>App Services Common Configuration Best Practices </h4>" >> $html_output
echo "<table>" >> $html_output
echo "<thead><tr><th>APP SERVICE NAME</th><th>AUTO HEAL</th><th>HEALTH CHECK</th><th>ALWAYS ON</th></tr></thead>" >> $html_output
echo "<tbody>" >> $html_output

_diplayAppServiceRecommendations_common=0
_webApps=$(az webapp list --subscription $_subscriptionId --query "[].{name:name, resourceGroup:resourceGroup}" --output jsonc)
for item in $(echo "$_webApps" | jq -r '.[] | @base64'); do
    _jq() {
        echo ${item} | base64 --decode | jq -r ${1}
    }
    _name=$(_jq '.name')
    _resourceGroup=$(_jq '.resourceGroup')
    _autoHealEnabled=$(az webapp config show --subscription $_subscriptionId --resource-group $_resourceGroup --name $_name --query "autoHealEnabled" --output tsv | grep -q "^true$" && echo "ENABLED" || echo "DISABLED")
    _healthCheckPath=$(az webapp config show --subscription $_subscriptionId --resource-group $_resourceGroup --name $_name --query "healthCheckPath" --output tsv | grep -q . && echo "ENABLED" || echo "DISABLED")
    _alwaysOn=$(az webapp config show --subscription $_subscriptionId --resource-group $_resourceGroup --name $_name --query "alwaysOn" --output tsv | grep -q "^true$" && echo "ENABLED" || echo "DISABLED")

    # Apply colors conditionally for each field
    if [[ "$_autoHealEnabled" == "ENABLED" ]]; then
        autoHealColor="<span style='color: green;'>$_autoHealEnabled</span>"
    elif [[ "$_autoHealEnabled" == "DISABLED" ]]; then
        autoHealColor="<span style='color: rgb(155, 27, 27);'>$_autoHealEnabled</span>"
    else
        autoHealColor="$_autoHealEnabled"
    fi

    if [[ "$_healthCheckPath" == "ENABLED" ]]; then
        healthCheckColor="<span style='color: green;'>$_healthCheckPath</span>"
    elif [[ "$_healthCheckPath" == "DISABLED" ]]; then
        healthCheckColor="<span style='color: rgb(155, 27, 27);'>$_healthCheckPath</span>"
    else
        healthCheckColor="$_healthCheckPath"
    fi

    if [[ "$_alwaysOn" == "ENABLED" ]]; then
        alwaysOnColor="<span style='color: green;'>$_alwaysOn</span>"
    elif [[ "$_alwaysOn" == "DISABLED" ]]; then
        alwaysOnColor="<span style='color: rgb(155, 27, 27);'>$_alwaysOn</span>"
    else
        alwaysOnColor="$_alwaysOn"
    fi

    # Append to HTML Table
    echo "<tr><td>$_name</td><td>$autoHealColor</td><td>$healthCheckColor</td><td>$alwaysOnColor</td></tr>" >> $html_output
done

echo "</tbody></table>" >> $html_output


_diplayAppServicePlanRecommendations_density=0
_diplayAppServicePlanRecommendations_cost=0

app_service_plans=$(az appservice plan list --subscription $_subscriptionId --query "[].{Name:name, ResourceGroup:resourceGroup}" --output tsv)
while IFS=$'\t' read -r name resource_group; do
    webapp_count=$(az webapp list --subscription $_subscriptionId --query "[?appServicePlanId=='/subscriptions/$_subscriptionId/resourceGroups/$resource_group/providers/Microsoft.Web/serverfarms/$name'] | length(@)" -o tsv)
    webapp_info=$(az appservice plan show --name $name --subscription $_subscriptionId --resource-group $resource_group --query "{tier:sku.tier, size:sku.name, workers:sku.capacity}" --output json)
    webapp_worker=$(echo "$webapp_info" | jq -r '.workers')
    webapp_size=$(echo "$webapp_info" | jq -r '.size')
    webapp_tier=$(echo "$webapp_info" | jq -r '.tier')

  
    if [ "$_diplayAppServicePlanRecommendations_density" -eq 0 ]; then
        _diplayAppServicePlanRecommendations_density=1
        echo "<table>" >> $html_output
        echo "<thead><tr><th>APP SERVICE PLAN</th><th>SIZE</th><th>TIER</th><th>RECOMMENDED APPS COUNT</th><th>CURRENT APPS COUNT</th></tr></thead>" >> $html_output
    fi

    # Set colors based on webapp_count
    if [ "$webapp_count" -gt 1 ]; then
        HighCount="<span style='color: orange;'>$webapp_count</span>"
    else
        HighCount="$webapp_count"
    fi
		
    # Determine the recommended number of apps based on the plan size
    if [[ "$webapp_size" =~ ^(B1|S1|P1v2|I1v1|P0v3|P1)$ ]]; then
        recommended_apps="8"
    elif [[ "$webapp_size" =~ ^(B2|S2|P2v2|I2v1|P2)$ ]]; then
        recommended_apps="16"
    elif [[ "$webapp_size" =~ ^(B3|S3|P3v2|I3v1|P3)$ ]]; then
        recommended_apps="32"
    elif [[ "$webapp_size" =~ ^(P1v3|I1v2)$ ]]; then
        recommended_apps="16"
    elif [[ "$webapp_size" =~ ^(P2v3|I2v2)$ ]]; then
        recommended_apps="32"
    elif [[ "$webapp_size" =~ ^(P3v3|I3v2)$ ]]; then
        recommended_apps="64"
    elif [[ "$webapp_size" =~ ^(EP1)$ ]]; then
        recommended_apps="N/A"
    fi

 # Output to HTML Table
    echo "<tr><td>${name}</td><td>${webapp_size}</td><td>${webapp_tier}</td><td>${recommended_apps}</td><td>${webapp_count}</td></tr>" >> $html_output

    
    # Cost Recommendations
    if [ "$webapp_count" -eq 0 ]; then
        if [ "$_diplayAppServicePlanRecommendations_cost" -eq 0 ]; then
            echo "<h4>App Service Plan Cost Recommendations</h4>" >> $html_output
            _diplayAppServicePlanRecommendations_cost=1
            echo "<table>" >> $html_output
			 echo "<p class='warning'>The following app service plan has no app services, review and delete to optimize the cost.</p>" >> $html_output
            echo "<thead><tr><th>APP SERVICE PLAN</th><th>App Count</th></tr></thead>" >> $html_output
        fi
        echo "<tr><td>$name</td><td>0</td></tr>" >> $html_output
    fi
done <<<"$app_service_plans"

# End HTML content
echo "</tbody></table>" >> $html_output

# Adding the recommendation section on the right
echo "<div class='right-sidebar'>" >> $html_output
echo "<h3>Best Practices & Recommendations</h3>" >> $html_output
echo "<ul>" >> $html_output
echo "<li><strong>Auto Heal:</strong> Enable Auto Heal to automatically restart your app when it encounters issues. This enhances the availability of your app.</li>" >> $html_output
echo "<li><strong>Health Check:</strong> Implement a health check to proactively monitor your app's health. This minimizes downtime and ensures your app is running optimally.</li>" >> $html_output
echo "<li><strong>Always On:</strong> Always On keeps your app continuously warm, preventing time delays during the first request after idle periods, ensuring faster response times.</li>" >> $html_output
echo "<li><strong>Density Check:</strong> Perform a density check on your App Service Plan to ensure your resources align with usage. This improves both performance and cost-efficiency.</li>" >> $html_output
echo "</ul>" >> $html_output
echo "</div>" >> $html_output

echo "<footer><p style='text-align: center;'>End of Recommendations - More to Come</p></footer>" >> $html_output
echo
